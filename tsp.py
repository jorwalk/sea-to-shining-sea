"""Simple travelling salesman problem between cities."""

from __future__ import print_function
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import json

def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data['distance_matrix'] = [[0, 2856, 1498, 386, 2017, 1161, 991, 764, 177, 146, 4406, 1797, 545, 512, 754, 701, 410, 316, 1214, 714, 1079, 722,
  942, 230, 542, 1678, 820, 1927, 1097, 840, 1151, 986, 497, 1362, 555, 681, 2146, 756, 1046, 324, 1123, 264, 693, 1531,
  1106, 614, 2171, 489, 758, 1189],
 [2856, 0, 2006, 2516, 1483, 1826, 2855, 2881, 3032, 2845, 2808, 1280, 2340, 2464, 2107, 2168, 2592, 2798, 2837, 2855,
  2892, 2376, 1961, 2723, 2313, 1234, 2041, 1475, 2825, 2856, 2032, 2771, 2943, 1512, 2569, 2302, 1043, 2776, 2898,
  2952, 1734, 2631, 2596, 1565, 2738, 2894, 914, 2701, 2184, 1754],
 [1498, 2006, 0, 1134, 633, 586, 2215, 2063, 1641, 1592, 2909, 736, 1316, 1500, 1155, 991, 1557, 1245, 2371, 2011, 2301,
  1622, 1286, 1271, 1166, 907, 988, 582, 2278, 2104, 380, 2162, 1903, 1210, 1667, 841, 985, 1992, 2280, 1781, 982, 1446,
  870, 504, 2232, 1961, 1096, 1733, 1395, 664],
 [386, 2516, 1134, 0, 1633, 777, 1170, 977, 555, 459, 4039, 1415, 378, 487, 478, 350, 479, 303, 1369, 923, 1261, 693,
  706, 207, 265, 1313, 482, 1542, 1258, 1035, 773, 1138, 777, 1063, 627, 299, 1764, 929, 1233, 647, 789, 328, 441, 1146,
  1239, 853, 1796, 645, 597, 811],
 [2017, 1483, 633, 1633, 0, 888, 2558, 2451, 2179, 2085, 2461, 443, 1702, 1886, 1484, 1387, 1974, 1809, 2669, 2403,
  2634, 1946, 1522, 1806, 1579, 734, 1326, 101, 2595, 2474, 878, 2490, 2350, 1249, 2049, 1336, 447, 2364, 2620, 2261,
  1164, 1905, 1465, 532, 2533, 2378, 590, 2143, 1700, 903],
 [1161, 1826, 586, 777, 888, 0, 1691, 1569, 1332, 1211, 3342, 640, 815, 1001, 610, 500, 1086, 1010, 1825, 1520, 1772,
  1082, 706, 971, 691, 592, 445, 790, 1740, 1597, 286, 1629, 1463, 660, 1166, 503, 988, 1486, 1755, 1380, 399, 1022,
  771, 372, 1686, 1491, 1030, 1256, 841, 98],
 [991, 2855, 2215, 1170, 2558, 1691, 0, 234, 1013, 845, 5017, 2196, 899, 719, 1081, 1225, 691, 1289, 230, 279, 91, 612,
  1049, 1164, 1054, 1962, 1247, 2456, 116, 152, 1835, 84, 524, 1444, 555, 1407, 2505, 243, 65, 703, 1405, 851, 1604,
  2025, 173, 387, 2469, 530, 858, 1659],
 [764, 2881, 2063, 977, 2451, 1569, 234, 0, 779, 618, 4911, 2116, 756, 569, 968, 1082, 509, 1069, 464, 54, 317, 532,
  985, 949, 898, 1904, 1125, 2351, 348, 84, 1684, 258, 290, 1415, 403, 1235, 2440, 105, 284, 469, 1326, 650, 1401, 1920,
  384, 153, 2418, 334, 771, 1549],
 [177, 3032, 1641, 555, 2179, 1332, 1013, 779, 0, 228, 4547, 1970, 711, 652, 928, 878, 535, 410, 1242, 735, 1095, 847,
  1109, 374, 719, 1855, 997, 2090, 1125, 861, 1306, 1022, 491, 1535, 660, 844, 2318, 795, 1061, 309, 1300, 420, 805,
  1700, 1147, 625, 2347, 565, 915, 1363],
 [146, 2845, 1592, 459, 2085, 1211, 845, 618, 228, 0, 4498, 1837, 507, 427, 739, 727, 307, 456, 1069, 568, 933, 619,
  901, 352, 548, 1696, 832, 1992, 952, 694, 1233, 841, 355, 1338, 435, 758, 2184, 611, 900, 194, 1124, 214, 820, 1583,
  962, 469, 2200, 352, 697, 1228],
 [4406, 2808, 2909, 4039, 2461, 3342, 5017, 4911, 4547, 4498, 0, 2832, 4158, 4344, 3945, 3837, 4425, 4143, 5118, 4862,
  5092, 4406, 3974, 4179, 4027, 3093, 3785, 2562, 5050, 4935, 3267, 4948, 4793, 3639, 4508, 3741, 2559, 4825, 5079,
  4684, 3615, 4338, 3753, 2993, 4983, 4832, 2636, 4597, 4160, 3363],
 [1797, 1280, 736, 1415, 443, 640, 2196, 2116, 1970, 1837, 2832, 0, 1394, 1570, 1158, 1111, 1674, 1647, 2286, 2073,
  2267, 1593, 1148, 1611, 1298, 291, 1020, 357, 2221, 2129, 774, 2124, 2057, 822, 1723, 1142, 349, 2022, 2256, 1995,
  793, 1637, 1370, 298, 2153, 2063, 401, 1832, 1348, 609],
 [545, 2340, 1316, 378, 1702, 815, 899, 756, 711, 507, 4158, 1394, 0, 186, 243, 327, 280, 648, 1067, 706, 986, 335, 398,
  516, 160, 1219, 378, 1603, 966, 790, 936, 849, 663, 831, 354, 524, 1732, 678, 964, 621, 633, 295, 800, 1174, 930, 677,
  1732, 442, 228, 803],
 [512, 2464, 1500, 487, 1886, 1001, 719, 569, 652, 427, 4344, 1570, 186, 0, 412, 513, 130, 702, 897, 519, 807, 219, 503,
  563, 335, 1381, 560, 1787, 792, 605, 1120, 673, 496, 953, 168, 691, 1904, 493, 784, 489, 794, 252, 928, 1357, 763,
  495, 1897, 262, 282, 986],
 [754, 2107, 1155, 478, 1484, 610, 1081, 968, 928, 739, 3945, 1158, 243, 412, 0, 207, 521, 780, 1220, 921, 1162, 472,
  233, 666, 222, 976, 168, 1384, 1131, 990, 782, 1020, 902, 608, 568, 472, 1493, 880, 1145, 864, 390, 525, 814, 953,
  1080, 905, 1490, 674, 240, 582],
 [701, 2168, 991, 350, 1387, 500, 1225, 1082, 878, 727, 3837, 1111, 327, 513, 207, 0, 588, 645, 1383, 1031, 1310, 636,
  429, 556, 192, 977, 133, 1290, 1287, 1117, 611, 1171, 963, 721, 681, 266, 1457, 1005, 1289, 885, 439, 527, 616, 868,
  1245, 995, 1475, 761, 431, 504],
 [410, 2592, 1557, 479, 1974, 1086, 691, 509, 535, 307, 4425, 1674, 280, 130, 521, 588, 0, 643, 891, 456, 782, 313, 631,
  505, 398, 1496, 656, 1876, 779, 560, 1178, 660, 383, 1081, 158, 726, 2012, 452, 755, 360, 909, 176, 917, 1450, 764,
  407, 2010, 176, 412, 1080],
 [316, 2798, 1245, 303, 1809, 1010, 1289, 1069, 410, 456, 4143, 1647, 648, 702, 780, 645, 643, 0, 1508, 1017, 1379, 922,
  1005, 140, 563, 1578, 778, 1725, 1391, 1141, 931, 1276, 811, 1364, 800, 508, 1994, 1049, 1347, 640, 1083, 467, 395,
  1362, 1391, 923, 2040, 768, 875, 1061],
 [1214, 2837, 2371, 1369, 2669, 1825, 230, 464, 1242, 1069, 5118, 2286, 1067, 897, 1220, 1383, 891, 1508, 0, 508, 158,
  749, 1147, 1379, 1225, 2035, 1388, 2568, 117, 381, 1993, 232, 754, 1499, 742, 1587, 2578, 459, 192, 933, 1506, 1058,
  1807, 2141, 139, 617, 2529, 741, 984, 1783],
 [714, 2855, 2011, 923, 2403, 1520, 279, 54, 735, 568, 4862, 2073, 706, 519, 921, 1031, 456, 1017, 508, 0, 365, 495,
  947, 896, 847, 1864, 1077, 2303, 391, 127, 1631, 292, 250, 1381, 354, 1182, 2398, 92, 332, 426, 1283, 596, 1347, 1873,
  418, 112, 2378, 281, 729, 1501],
 [1079, 2892, 2301, 1261, 2634, 1772, 91, 317, 1095, 933, 5092, 2267, 986, 807, 1162, 1310, 782, 1379, 158, 365, 0, 691,
  1119, 1254, 1141, 2028, 1329, 2533, 73, 239, 1921, 144, 605, 1503, 644, 1496, 2571, 333, 35, 786, 1477, 942, 1695,
  2102, 160, 471, 2531, 621, 935, 1737],
 [722, 2376, 1622, 693, 1946, 1082, 612, 532, 847, 619, 4406, 1593, 335, 219, 472, 636, 313, 922, 749, 495, 691, 0, 453,
  782, 493, 1373, 640, 1845, 659, 536, 1244, 548, 575, 887, 207, 857, 1911, 433, 675, 632, 800, 469, 1128, 1414, 610,
  519, 1886, 339, 247, 1047],
 [942, 1961, 1286, 706, 1522, 706, 1049, 985, 1109, 901, 3974, 1148, 398, 503, 233, 429, 631, 1005, 1147, 947, 1119,
  453, 0, 885, 443, 920, 339, 1421, 1076, 988, 932, 976, 989, 451, 619, 694, 1460, 886, 1109, 991, 359, 691, 1044, 995,
  1011, 959, 1433, 747, 226, 648],
 [230, 2723, 1271, 207, 1806, 971, 1164, 949, 374, 352, 4179, 1611, 516, 563, 666, 556, 505, 140, 1379, 896, 1254, 782,
  885, 0, 445, 1518, 687, 1718, 1263, 1018, 932, 1147, 705, 1264, 663, 474, 1959, 922, 1223, 544, 995, 330, 468, 1335,
  1259, 807, 1996, 638, 743, 1011],
 [542, 2313, 1166, 265, 1579, 691, 1054, 898, 719, 548, 4027, 1298, 160, 335, 222, 192, 398, 563, 1225, 847, 1141, 493,
  443, 445, 0, 1149, 285, 1481, 1124, 938, 786, 1006, 772, 826, 502, 364, 1642, 827, 1118, 697, 581, 341, 654, 1059,
  1089, 806, 1653, 572, 344, 693],
 [1678, 1234, 907, 1313, 734, 592, 1962, 1904, 1855, 1696, 3093, 291, 1219, 1381, 976, 977, 1496, 1578, 2035, 1864,
  2028, 1373, 920, 1518, 1149, 0, 864, 645, 1978, 1908, 817, 1886, 1876, 546, 1524, 1074, 544, 1805, 2020, 1837, 588,
  1487, 1362, 403, 1905, 1867, 516, 1642, 1135, 521],
 [820, 2041, 988, 482, 1326, 445, 1247, 1125, 997, 832, 3785, 1020, 378, 560, 168, 133, 656, 778, 1388, 1077, 1329, 640,
  339, 687, 285, 864, 0, 1227, 1299, 1152, 617, 1187, 1038, 588, 723, 370, 1362, 1041, 1311, 978, 308, 624, 729, 797,
  1249, 1054, 1370, 820, 407, 425],
 [1927, 1475, 582, 1542, 101, 790, 2456, 2351, 2090, 1992, 2562, 357, 1603, 1787, 1384, 1290, 1876, 1725, 2568, 2303,
  2533, 1845, 1421, 1718, 1481, 645, 1227, 0, 2494, 2373, 795, 2389, 2253, 1152, 1949, 1246, 432, 2263, 2519, 2166,
  1063, 1809, 1389, 431, 2431, 2279, 567, 2044, 1599, 802],
 [1097, 2825, 2278, 1258, 2595, 1740, 116, 348, 1125, 952, 5050, 2221, 966, 792, 1131, 1287, 779, 1391, 117, 391, 73,
  659, 1076, 1263, 1124, 1978, 1299, 2494, 0, 265, 1898, 120, 638, 1449, 634, 1483, 2522, 342, 97, 816, 1434, 945, 1695,
  2064, 89, 501, 2478, 626, 900, 1702],
 [840, 2856, 2104, 1035, 2474, 1597, 152, 84, 861, 694, 4935, 2129, 790, 605, 990, 1117, 560, 1141, 381, 127, 239, 536,
  988, 1018, 938, 1908, 1152, 2373, 265, 0, 1724, 176, 373, 1407, 437, 1284, 2447, 112, 206, 551, 1336, 711, 1464, 1942,
  301, 236, 2420, 391, 781, 1572],
 [1151, 2032, 380, 773, 878, 286, 1835, 1684, 1306, 1233, 3267, 774, 936, 1120, 782, 611, 1178, 931, 1993, 1631, 1921,
  1244, 932, 932, 786, 817, 617, 795, 1898, 1724, 0, 1782, 1531, 945, 1287, 475, 1101, 1612, 1900, 1418, 670, 1075, 605,
  476, 1854, 1584, 1175, 1354, 1022, 383],
 [986, 2771, 2162, 1138, 2490, 1629, 84, 258, 1022, 841, 4948, 2124, 849, 673, 1020, 1171, 660, 1276, 232, 292, 144,
  548, 976, 1147, 1006, 1886, 1187, 2389, 120, 176, 1782, 0, 542, 1365, 514, 1364, 2430, 230, 134, 715, 1334, 826, 1576,
  1959, 126, 403, 2391, 509, 792, 1594],
 [497, 2943, 1903, 777, 2350, 1463, 524, 290, 491, 355, 4793, 2057, 663, 496, 902, 963, 383, 811, 754, 250, 605, 575,
  989, 705, 772, 1876, 1038, 2253, 638, 373, 1531, 542, 0, 1439, 375, 1062, 2395, 325, 571, 183, 1289, 457, 1170, 1829,
  668, 138, 2391, 243, 763, 1461],
 [1362, 1512, 1210, 1063, 1249, 660, 1444, 1415, 1535, 1338, 3639, 822, 831, 953, 608, 721, 1081, 1364, 1499, 1381,
  1503, 887, 451, 1264, 826, 546, 588, 1152, 1449, 1407, 945, 1365, 1439, 0, 1067, 935, 1083, 1312, 1499, 1440, 308,
  1125, 1289, 778, 1372, 1403, 1030, 1196, 676, 565],
 [555, 2569, 1667, 627, 2049, 1166, 555, 403, 660, 435, 4508, 1723, 354, 168, 568, 681, 158, 800, 742, 354, 644, 207,
  619, 663, 502, 1524, 723, 1949, 634, 437, 1287, 514, 375, 1067, 0, 853, 2053, 325, 619, 425, 938, 333, 1067, 1519,
  612, 343, 2040, 133, 395, 1147],
 [681, 2302, 841, 299, 1336, 503, 1407, 1235, 844, 758, 3741, 1142, 524, 691, 472, 266, 726, 508, 1587, 1182, 1496, 857,
  694, 474, 364, 1074, 370, 1246, 1483, 1284, 475, 1364, 1062, 935, 853, 0, 1489, 1174, 1472, 943, 631, 605, 360, 861,
  1451, 1124, 1532, 901, 681, 555],
 [2146, 1043, 985, 1764, 447, 988, 2505, 2440, 2318, 2184, 2559, 349, 1732, 1904, 1493, 1457, 2012, 1994, 2578, 2398,
  2571, 1911, 1460, 1959, 1642, 544, 1362, 432, 2522, 2447, 1101, 2430, 2395, 1083, 2053, 1489, 0, 2343, 2563, 2339,
  1116, 1983, 1705, 634, 2449, 2395, 146, 2166, 1670, 957],
 [756, 2776, 1992, 929, 2364, 1486, 243, 105, 795, 611, 4825, 2022, 678, 493, 880, 1005, 452, 1049, 459, 92, 333, 433,
  886, 922, 827, 1805, 1041, 2263, 342, 112, 1612, 230, 325, 1312, 325, 1174, 2343, 0, 304, 489, 1230, 608, 1362, 1832,
  353, 191, 2319, 287, 675, 1461],
 [1046, 2898, 2280, 1233, 2620, 1755, 65, 284, 1061, 900, 5079, 2256, 964, 784, 1145, 1289, 755, 1347, 192, 332, 35,
  675, 1109, 1223, 1118, 2020, 1311, 2519, 97, 206, 1900, 134, 571, 1499, 619, 1472, 2563, 304, 0, 752, 1466, 913, 1666,
  2088, 178, 437, 2525, 591, 920, 1722],
 [324, 2952, 1781, 647, 2261, 1380, 703, 469, 309, 194, 4684, 1995, 621, 489, 864, 885, 360, 640, 933, 426, 786, 632,
  991, 544, 697, 1837, 978, 2166, 816, 551, 1418, 715, 183, 1440, 425, 943, 2339, 489, 752, 0, 1254, 358, 1012, 1751,
  841, 316, 2347, 302, 771, 1389],
 [1123, 1734, 982, 789, 1164, 399, 1405, 1326, 1300, 1124, 3615, 793, 633, 794, 390, 439, 909, 1083, 1506, 1283, 1477,
  800, 359, 995, 581, 588, 308, 1063, 1434, 1336, 670, 1334, 1289, 308, 938, 631, 1116, 1230, 1466, 1254, 0, 911, 983,
  640, 1370, 1281, 1103, 1054, 555, 318],
 [264, 2631, 1446, 328, 1905, 1022, 851, 650, 420, 214, 4338, 1637, 295, 252, 525, 527, 176, 467, 1058, 596, 942, 469,
  691, 330, 341, 1487, 624, 1809, 945, 711, 1075, 826, 457, 1125, 333, 605, 1983, 608, 913, 358, 911, 0, 753, 1393, 935,
  525, 1994, 321, 496, 1031],
 [693, 2596, 870, 441, 1465, 771, 1604, 1401, 805, 820, 3753, 1370, 800, 928, 814, 616, 917, 395, 1807, 1347, 1695,
  1128, 1044, 468, 654, 1362, 729, 1389, 1695, 1464, 605, 1576, 1170, 1289, 1067, 360, 1705, 1362, 1666, 1012, 983, 753,
  0, 1074, 1679, 1266, 1771, 1075, 997, 848],
 [1531, 1565, 504, 1146, 532, 372, 2025, 1920, 1700, 1583, 2993, 298, 1174, 1357, 953, 868, 1450, 1362, 2141, 1873,
  2102, 1414, 995, 1335, 1059, 403, 797, 431, 2064, 1942, 476, 1959, 1829, 778, 1519, 861, 634, 1832, 2088, 1751, 640,
  1393, 1074, 0, 2003, 1851, 699, 1616, 1168, 372],
 [1106, 2738, 2232, 1239, 2533, 1686, 173, 384, 1147, 962, 4983, 2153, 930, 763, 1080, 1245, 764, 1391, 139, 418, 160,
  610, 1011, 1259, 1089, 1905, 1249, 2431, 89, 301, 1854, 126, 668, 1372, 612, 1451, 2449, 353, 178, 841, 1370, 935,
  1679, 2003, 0, 530, 2402, 623, 845, 1644],
 [614, 2894, 1961, 853, 2378, 1491, 387, 153, 625, 469, 4832, 2063, 677, 495, 905, 995, 407, 923, 617, 112, 471, 519,
  959, 807, 806, 1867, 1054, 2279, 501, 236, 1584, 403, 138, 1403, 343, 1124, 2395, 191, 437, 316, 1281, 525, 1266,
  1851, 530, 0, 2382, 235, 736, 1479],
 [2171, 914, 1096, 1796, 590, 1030, 2469, 2418, 2347, 2200, 2636, 401, 1732, 1897, 1490, 1475, 2010, 2040, 2529, 2378,
  2531, 1886, 1433, 1996, 1653, 516, 1370, 567, 2478, 2420, 1175, 2391, 2391, 1030, 2040, 1532, 146, 2319, 2525, 2347,
  1103, 1994, 1771, 699, 2402, 2382, 0, 2157, 1650, 985],
 [489, 2701, 1733, 645, 2143, 1256, 530, 334, 565, 352, 4597, 1832, 442, 262, 674, 761, 176, 768, 741, 281, 621, 339,
  747, 638, 572, 1642, 820, 2044, 626, 391, 1354, 509, 243, 1196, 133, 901, 2166, 287, 591, 302, 1054, 321, 1075, 1616,
  623, 235, 2157, 0, 521, 1245],
 [758, 2184, 1395, 597, 1700, 841, 858, 771, 915, 697, 4160, 1348, 228, 282, 240, 431, 412, 875, 984, 729, 935, 247,
  226, 743, 344, 1135, 407, 1599, 900, 781, 1022, 792, 763, 676, 395, 681, 1670, 675, 920, 771, 555, 496, 997, 1168,
  845, 736, 1650, 521, 0, 802],
 [1189, 1754, 664, 811, 903, 98, 1659, 1549, 1363, 1228, 3363, 609, 803, 986, 582, 504, 1080, 1061, 1783, 1501, 1737,
  1047, 648, 1011, 693, 521, 425, 802, 1702, 1572, 383, 1594, 1461, 565, 1147, 555, 957, 1461, 1722, 1389, 318, 1031,
  848, 372, 1644, 1479, 985, 1245, 802, 0]]
    data['num_vehicles'] = 1
    data['depot'] = 24
    return data

def capital_name(idx):
    with open('states.json') as json_file:
        capitals = json.load(json_file)
        return capitals[idx].get('capital')



def print_solution(manager, routing, assignment):
    """Prints assignment on console."""
    route = []
    print('Objective: {} miles'.format(assignment.ObjectiveValue()))
    index = routing.Start(0)
    plan_output = 'Route for vehicle 0:\n'
    route_distance = 0
    while not routing.IsEnd(index):
        route.append(manager.IndexToNode(index))
        plan_output += ' {} ->'.format(capital_name(manager.IndexToNode(index)))
        previous_index = index
        index = assignment.Value(routing.NextVar(index))
        route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)
    plan_output += ' {}\n'.format(capital_name(manager.IndexToNode(index)))
    route.append(manager.IndexToNode(index))
    print(plan_output)
    plan_output += 'Route distance: {}miles\n'.format(route_distance)
    print(route)


def main():
    """Entry point of the program."""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(
        len(data['distance_matrix']), data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    # Solve the problem.
    assignment = routing.SolveWithParameters(search_parameters)

    # Print solution on console.
    if assignment:
        print_solution(manager, routing, assignment)




if __name__ == '__main__':
    main()
